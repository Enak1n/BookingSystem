// <auto-generated />
using System;
using BookingSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookingSystem.Infrastructure.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20241228170129_AddTable_Tickets")]
    partial class AddTable_Tickets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.AirportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedYear")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Airports", (string)null);
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.FlightEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DepartureAirportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeparturePoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DestinationAirportId")
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmptyPlaces")
                        .HasColumnType("integer");

                    b.Property<string>("NumberOfTheFlight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlaneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartureAirportId");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("PlaneId");

                    b.ToTable("Flights", (string)null);
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.PlaneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfCreation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Planes", (string)null);
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid");

                    b.Property<int>("Seat")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.AirportEntity", b =>
                {
                    b.HasOne("BookingSystem.Infrastructure.Entities.CountryEntity", "Country")
                        .WithMany("Airports")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.FlightEntity", b =>
                {
                    b.HasOne("BookingSystem.Infrastructure.Entities.AirportEntity", "DepartureAirport")
                        .WithMany("FlightsDeparting")
                        .HasForeignKey("DepartureAirportId");

                    b.HasOne("BookingSystem.Infrastructure.Entities.AirportEntity", "DestinationAirport")
                        .WithMany("FlightsArriving")
                        .HasForeignKey("DestinationAirportId");

                    b.HasOne("BookingSystem.Infrastructure.Entities.PlaneEntity", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartureAirport");

                    b.Navigation("DestinationAirport");

                    b.Navigation("Plane");
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.TicketEntity", b =>
                {
                    b.HasOne("BookingSystem.Infrastructure.Entities.FlightEntity", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BookingSystem.Infrastructure.Entities.PassengerEntity", "Passenger", b1 =>
                        {
                            b1.Property<Guid>("TicketEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text")
                                .HasColumnName("Patronymic");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Surname");

                            b1.HasKey("TicketEntityId");

                            b1.ToTable("Tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketEntityId");
                        });

                    b.Navigation("Flight");

                    b.Navigation("Passenger")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.AirportEntity", b =>
                {
                    b.Navigation("FlightsArriving");

                    b.Navigation("FlightsDeparting");
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.CountryEntity", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.FlightEntity", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BookingSystem.Infrastructure.Entities.PlaneEntity", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
