version: '3.4'

networks: 
  rmoff_kafka:
    name: rmoff_kafka

services:
  bookingsystem.api:
    image: ${DOCKER_REGISTRY-}bookingsystemapi
    environment:
      ConnectionStrings__DbConnection: "Server = database; Port = 5432; Database = BookingSystemDB; User Id = postgres; Password = postgres"
    networks: 
      - rmoff_kafka
    build:
      context: .
      dockerfile: BookingSystem.Api/Dockerfile

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: zookeeper
    networks: 
      - rmoff_kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  message_broker:
    image: confluentinc/cp-kafka:5.5.0
    container_name: broker
    ports: 
      - "19092:19092"
    networks: 
      - rmoff_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,CONNECTIONS_FROM_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka_ui:
    container_name: kafka-ui
    image: ${DOCKER_REGISTRY-}provectuslabs/kafka-ui
    networks: 
      - rmoff_kafka
    ports:
        - 8080:8080
    environment:
        KAFKA_CLUSTERS_0_NAME: transitional_path
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: message_broker:9092
        KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
        KAFKA_CLUSTERS_0_JMXPORT: 9997
        DYNAMIC_CONFIG_ENABLED: true
    depends_on: 
        - message_broker

  database:
    image: postgres
    restart: always
    networks: 
      - rmoff_kafka
    environment:
      POSTGRES_DB: BookingSystemDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5433:5432

